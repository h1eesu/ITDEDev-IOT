import cv2
import face_recognition
import numpy as np
from PIL import Image
import urllib.request
import time
import os
import glob
import datetime
from config import LOG_PATH
import json

def get_frame_from_ipcam(ipcam_url):
    """
    L·∫•y m·ªôt khung h√¨nh t·ª´ IP Webcam.
    """
    try:
        resp = urllib.request.urlopen(ipcam_url)
        image = np.asarray(bytearray(resp.read()), dtype="uint8")
        frame = cv2.imdecode(image, cv2.IMREAD_COLOR)
        return frame
    except Exception as e:
        print(f"L·ªói khi truy c·∫≠p IP Webcam: {e}")
        return None

def load_embeddings_from_folder(embeddings_dir):
    """
    T·∫£i c√°c embedding t·ª´ th∆∞ m·ª•c ch·ª©a file .npy
    """
    known_face_encodings = []
    known_face_names = []
    
    # Ki·ªÉm tra th∆∞ m·ª•c c√≥ t·ªìn t·∫°i
    if not os.path.exists(embeddings_dir):
        print(f"L·ªói: Th∆∞ m·ª•c {embeddings_dir} kh√¥ng t·ªìn t·∫°i")
        return known_face_encodings, known_face_names
    
    # T√¨m t·∫•t c·∫£ file .npy trong th∆∞ m·ª•c
    embedding_files = glob.glob(os.path.join(embeddings_dir, "*.npy"))
    
    if not embedding_files:
        print(f"Kh√¥ng t√¨m th·∫•y file embedding n√†o trong th∆∞ m·ª•c {embeddings_dir}")
        return known_face_encodings, known_face_names
    
    print(f"ƒêang t·∫£i {len(embedding_files)} file embedding...")
    
    # ƒê·ªçc t·ª´ng file embedding
    for file_path in embedding_files:
        try:
            # L·∫•y t√™n ng∆∞·ªùi t·ª´ t√™n file (kh√¥ng bao g·ªìm ƒë∆∞·ªùng d·∫´n v√† ph·∫ßn m·ªü r·ªông)
            name = os.path.splitext(os.path.basename(file_path))[0]
            
            # T·∫£i embedding t·ª´ file
            embedding = np.load(file_path)
            
            # Th√™m v√†o danh s√°ch
            known_face_encodings.append(embedding)
            known_face_names.append(name)
            
            print(f"ƒê√£ t·∫£i embedding c·ªßa {name}")
        except Exception as e:
            print(f"L·ªói khi t·∫£i file {file_path}: {e}")
    
    return known_face_encodings, known_face_names

def recognize_faces(ipcam_url, embeddings_dir, tolerance=0.6):
    """
    Nh·∫≠n di·ªán khu√¥n m·∫∑t t·ª´ IP Webcam v√† so s√°nh v·ªõi embedding trong th∆∞ m·ª•c.
    Ch·ªâ nh·∫≠n di·ªán v√† x·ª≠ l√Ω m·ªôt khu√¥n m·∫∑t duy nh·∫•t (khu√¥n m·∫∑t l·ªõn nh·∫•t) trong m·ªói khung h√¨nh.
    Hi·ªÉn th·ªã khung m√†u xanh l√° khi ƒëi·ªÉm danh th√†nh c√¥ng, m√†u ƒë·ªè khi kh√¥ng th√†nh c√¥ng.
    Hi·ªÉn th·ªã th√™m th·ªùi gian ƒëi·ªÉm danh.
    """
    # T·∫£i c√°c embedding t·ª´ th∆∞ m·ª•c
    known_face_encodings, known_face_names = load_embeddings_from_folder(embeddings_dir)
    
    if not known_face_encodings:
        print("Kh√¥ng c√≥ d·ªØ li·ªáu embedding ƒë·ªÉ so s√°nh.")
        return
    
    print(f"ƒêang k·∫øt n·ªëi ƒë·∫øn IP Webcam t·∫°i {ipcam_url}...")
    print("ƒêang b·∫Øt ƒë·∫ßu nh·∫≠n di·ªán khu√¥n m·∫∑t v√† ƒëi·ªÉm danh... Nh·∫•n 'q' ƒë·ªÉ tho√°t.")
    
    # L∆∞u tr·∫°ng th√°i ƒëi·ªÉm danh ƒë·ªÉ tr√°nh th√¥ng b√°o li√™n t·ª•c
    attendance_status = {name: False for name in known_face_names}
    attendance_times = {}
    attendance_successful = False
    last_attendance_time = {}
    attendance_log = []
    log_file = LOG_PATH

    if not os.path.exists(log_file):
        with open(log_file, "w", encoding="utf-8") as f:
            json.dump([], f, ensure_ascii=False, indent=4)

    while True:
        # L·∫•y khung h√¨nh t·ª´ IP Webcam
        frame = get_frame_from_ipcam(ipcam_url)
        
        if frame is None:
            print("Kh√¥ng th·ªÉ l·∫•y khung h√¨nh t·ª´ IP Webcam. ƒêang th·ª≠ l·∫°i...")
            time.sleep(1)
            continue

        #th·ªùi gian
        current_time = datetime.datetime.now()
        current_time_str = current_time.strftime("%H:%M:%S")
        current_date_str = current_time.strftime("%d-%m-%Y")

        cv2.putText(frame, f"Th·ªùi gian: {current_time_str}", (frame.shape[1] -250, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)

        small_frame = cv2.resize(frame, (0, 0), fx=0.25, fy=0.25)
        rgb_small_frame = cv2.cvtColor(small_frame, cv2.COLOR_BGR2RGB)
        face_locations = face_recognition.face_locations(rgb_small_frame)
        current_frame_attendance = False

        # Hi·ªÉn th·ªã th√¥ng tin debug
        cv2.putText(frame, f"Faces detected: {len(face_locations)}", 
                   (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 255), 2)
        
        # Hi·ªÉn th·ªã th√¥ng tin ƒëi·ªÉm danh
        attendance_text = "ƒê√£ ƒëi·ªÉm danh: " + ", ".join([name for name, status in attendance_status.items() if status])
        cv2.putText(frame, attendance_text, (10, frame.shape[0] - 20), 
                   cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 255, 0), 2)
        
        # N·∫øu c√≥ khu√¥n m·∫∑t ƒë∆∞·ª£c ph√°t hi·ªán
        if len(face_locations) > 0:
            # t√¨m khu√¥n m·∫∑t l·ªõn nh·∫•t trong khung h√¨nh(ng∆∞·ªùi g·∫ßn cam nh·∫•t)
            face_areas = [(right - left) * (bottom - top) for (top, right, bottom, left) in face_locations]
            largest_face_index = face_areas.index(max(face_areas))
            face_location = face_locations[largest_face_index]

            # m√£ h√≥a khu√¥n m·∫∑t ƒë√£ ch·ªçn
            face_encodings = face_recognition.face_encodings(rgb_small_frame, [face_location])
            
            if face_encodings:
                face_encoding = face_encodings[0]
                top, right, bottom, left = face_location
                # So s√°nh v·ªõi khu√¥n m·∫∑t ƒë√£ bi·∫øt
                matches = face_recognition.compare_faces(known_face_encodings, face_encoding, tolerance)
                name = "Unknown"
                
                # T√¨m khu√¥n m·∫∑t gi·ªëng nh·∫•t
                if len(known_face_encodings) > 0:
                    face_distances = face_recognition.face_distance(known_face_encodings, face_encoding)
                    best_match_index = np.argmin(face_distances)
                    confidence = 1 - face_distances[best_match_index]

                    if matches[best_match_index]:
                        name = known_face_names[best_match_index]                        
                        # Ki·ªÉm tra xem ng∆∞·ªùi n√†y ƒë√£ ƒë∆∞·ª£c ƒëi·ªÉm danh ch∆∞a
                        current_time = time.time()

                        if not attendance_status[name]:
                            # ƒê√°nh d·∫•u ƒë√£ ƒëi·ªÉm danh
                            user_id, user_name = name.split("_", 1)
                            attendance_status[name] = True
                            last_attendance_time[name] = current_time
                            attendance_times[name] = f"{current_time_str} - {current_date_str}"

                            attendance_log.append({
                                "user_id": user_id,
                                "name": user_name,
                                "time": current_time_str,
                                "date": current_date_str
                            })
                            with open(log_file, "w", encoding="utf-8") as f:
                                json.dump(attendance_log, f, indent=4, ensure_ascii=False)
                            print(f"\n‚úÖ {name} ƒë√£ ƒë∆∞·ª£c ƒëi·ªÉm danh! (ƒê·ªô tin c·∫≠y: {confidence:.2f})")
                        elif current_time - last_attendance_time.get(name, 0) > 60:  # Th√¥ng b√°o l·∫°i sau 60 gi√¢y
                            print(f"\nüîÑ {name} ƒë√£ ƒë∆∞·ª£c ph√°t hi·ªán l·∫°i! (ƒê·ªô tin c·∫≠y: {confidence:.2f})")
                            last_attendance_time[name] = current_time
                            current_frame_attendance = True
                        else:
                            current_frame_attendance = True
                
                # Nh√¢n t·ªça ƒë·ªô l√™n v√¨ ƒë√£ thu nh·ªè khung h√¨nh
                top *= 4
                right *= 4
                bottom *= 4
                left *= 4
                
                # Ch·ªçn m√†u d·ª±a tr√™n vi·ªác ƒë√£ ƒëi·ªÉm danh hay ch∆∞a
                if name != "Unknown" and attendance_status[name]:
                    color = (0, 255, 0)  # Xanh l√° cho ng∆∞·ªùi ƒë√£ ƒëi·ªÉm danh
                else:
                    color = (0, 0, 255)  # ƒê·ªè cho ng∆∞·ªùi ch∆∞a nh·∫≠n di·ªán ƒë∆∞·ª£c
                cv2.rectangle(frame, (left, top), (right, bottom), color, 2)
                
                # V·∫Ω nh√£n t√™n v·ªõi ƒë·ªô tin c·∫≠y n·∫øu nh·∫≠n di·ªán ƒë∆∞·ª£c
                label = name
                if name != "Unknown":
                    label = f"{name} ({confidence:.2f})"
                    
                    # V·∫Ω tr·∫°ng th√°i ƒëi·ªÉm danh
                    status = "ƒê√£ ƒëi·ªÉm danh" if attendance_status[name] else "Ch∆∞a ƒëi·ªÉm danh"
                    cv2.putText(frame, status, (left, top - 10), 
                               cv2.FONT_HERSHEY_SIMPLEX, 0.6, color, 2)
                
                #Hi·ªÉn th·ªã th·ªùi gian n·∫øu ƒë√£ ƒëi·ªÉm danh
                if attendance_status[name] and name in attendance_times:
                    time_text = f"Th·ªùi gian: {attendance_times[name]}"
                    cv2.putText(frame, time_text, (left, top - 10), 
                                   cv2.FONT_HERSHEY_SIMPLEX, 0.5, color, 1)
                
                cv2.rectangle(frame, (left, bottom - 35), (right, bottom), color, cv2.FILLED)
                cv2.putText(frame, label, (left + 6, bottom - 6), 
                           cv2.FONT_HERSHEY_DUPLEX, 0.8, (255, 255, 255), 1)

                if len(face_locations) > 1:
                    cv2.putText(frame, f"Ch·ªâ nh·∫≠n di·ªán khu√¥n m·∫∑t l·ªõn nh·∫•t!", 
                              (10, 60), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 140, 255), 2)
                attendance_successful= current_frame_attendance
        
        # border_thickness = 15
        # border_color = (0, 255, 0) if attendance_successful else (0, 0, 255)  # Xanh l√° n·∫øu ƒëi·ªÉm danh th√†nh c√¥ng, ƒë·ªè n·∫øu kh√¥ng
        # cv2.line(frame, (0, 0), (frame.shape[1], 0), border_color, border_thickness)
        # cv2.line(frame, (0, frame.shape[0]-1), (frame.shape[1], frame.shape[0]-1), border_color, border_thickness)
        # cv2.line(frame, (0, 0), (0, frame.shape[0]), border_color, border_thickness)
        # cv2.line(frame, (frame.shape[1]-1, 0), (frame.shape[1]-1, frame.shape[0]), border_color, border_thickness)
        cv2.imshow('Face Recognition & Attendance', frame)
        
        # Tho√°t n·∫øu nh·∫•n ph√≠m 'q'
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break
    
    # D·ªçn d·∫πp
    cv2.destroyAllWindows()
    
    # Hi·ªÉn th·ªã b√°o c√°o ƒëi·ªÉm danh cu·ªëi c√πng
    print("\n===== B√ÅO C√ÅO ƒêI·ªÇM DANH =====")
    for name, status in attendance_status.items():
        status_text = "C√≥ m·∫∑t" if status else "V·∫Øng m·∫∑t"
        print(f"{name}: {status_text}")
    print("=============================")